beta_0=0;beta_1=0;sigma=1
with(lr_data,sum(dnorm(y,beta_0 + beta_1*x,sd=sigma,log = TRUE)))
# Fitting linear regression via maximum likelihood
beta_0=0;beta_1=3;sigma=1
with(lr_data,sum(dnorm(y,beta_0 + beta_1*x,sd=sigma,log = TRUE)))
# Fitting linear regression via maximum likelihood
beta_0=3;beta_1=2;sigma=1
with(lr_data,sum(dnorm(y,beta_0 + beta_1*x,sd=sigma,log = TRUE)))
# Fitting linear regression via maximum likelihood
beta_0=4;beta_1=2;sigma=1
with(lr_data,sum(dnorm(y,beta_0 + beta_1*x,sd=sigma,log = TRUE)))
3
3
#Fitting LR using multivariate normal
library(mvtnorm)
install.packages("~/Downloads/mvtnorm_1.0-11.tar.gz", repos = NULL, type = "source")
#Fitting LR using multivariate normal
library(mvtnorm)
install.packages("~/Downloads/mvtnorm/R/mvt.R", repos = NULL)
Sigma = diag(sigma,nrow(lr_data))
X=with(lr_data,cbind(1,x))
beta=c(beta_0,beta_1)
with(lr_data,dmvnorm(y,X%*%beta,Sigma, log=TRUE))
acv = tibble(
distance=seq(0,5,length=100),
`theta=10` = tau^2 * exp(-(distance)^2/theta1),
`theta = 1`= tau^2 * exp(-(distance)^2/theta2),
)
acv = tibble(
distance=seq(0,5,length=100),
`theta=10` = tau^2 * exp(-(distance)^2/theta1),
`theta = 1`= tau^2 * exp(-(distance)^2/theta2),
)
#Autocovariance Functions
tau=1;theta1=10;theta2=1
acv = tibble(
distance=seq(0,5,length=100),
`theta=10` = tau^2 * exp(-(distance)^2/theta1),
`theta = 1`= tau^2 * exp(-(distance)^2/theta2),
)
p=acv %>%
p=acv %>%
gather(key=Type,value=ACF,-distance)%>%
p=acv %>%
gather(key=Type,value=ACF,-distance)%>%
ggplot(aes(x=distance,y=ACF,colour=Type))+
p=acv %>%
gather(key=Type,value=ACF,-distance)%>%
ggplot(aes(x=distance,y=ACF,colour=Type))+
geom_line
p=acv %>%
gather(key=Type,value=ACF,-distance)%>%
ggplot(aes(x=distance,y=ACF,colour=Type))+
geom_line()
p
#Fitting a model via MVN
suppressPackageStartupMessages(library(fields))
install.packages("~/Downloads/fields_9.9.tar.gz", repos = NULL, type = "source")
Sigma= with(lr_data,
diag(sigma^2,nrow(lr_data))+
tau^2*Exp.cov(x,x,theta=theta2,p=2))
rount(Sigma[1:3,1:3],3)
round(Sigma[1:3,1:3],3)
with(lr_data,dmvnorm(y,X%*%beta,Sigma,log=TRUE))
#New regression data set
suppressPackageStartupMessages(library(boot))
scale2 = function(x)(x-mean(x))/sd(x)
motor2 = motor %>% mutate_all(scale2)
motor2 %>%
motor2 %>%
ggplot(aes(x=times, y = accel))+
geo_point()
suppressPackageStartupMessages(library(boot))
scale2 = function(x)(x-mean(x))/sd(x)
motor2 = motor %>% mutate_all(scale2)
motor2 %>%
ggplot(aes(x=times, y = accel))+
geo_point()
suppressPackageStartupMessages(library(boot))
scale2 = function(x)(x-mean(x))/sd(x)
motor2 = motor %>% mutate_all(scale2)
motor2 %>%
ggplot(aes(x=times, y = accel))+
geom_point()
Sigma = with(motor2,
diag(sigma^2,nrow(motor2))+
tau^2*Exp.cov(times,times,
theta=theta,p=2))
Sigma = with(motor2,
diag(sigma^2,nrow(motor2))+
tau^2*Exp.cov(times,times,
with(motor2, -dmvnorm(accel,
rep(0,nrow(motor2)),
sigma=Sigma,log=TRUE))                              theta=theta,p=2))
#Fitting a GP
nll = function(par){
tau=par[1]
sigma=par[2]
theta=par[3]
Sigma = with(motor2,
diag(sigma^2,nrow(motor2))+
tau^2*Exp.cov(times,times,
with(motor2, -dmvnorm(accel,
rep(0,nrow(motor2)),
sigma=Sigma,log=TRUE))                              theta=theta,p=2))
}
nll(c(1,1,1))
## Andrew's example
# Define server logic to summarize and view selected dataset ----
library(tidyverse)
library(boot)
library(fields)
library(MASS)
theme_set(theme_bw())
server <- function(input, output) {
# Return the requested dataset ----
# By declaring datasetInput as a reactive expression we ensure
# that:
#
# 1. It is only called when the inputs it depends on changes
# 2. The computation and result are shared by all the callers,
#    i.e. it only executes a single time
datasetInput <- reactive({
ds = switch(input$dataset,
"motor" = motor[,1:2],
"boston" = Boston[,c('lstat', 'medv')],
"longley" = longley[,c('Year', 'Employed')])
scale2 = function(x) (x - mean(x))/sd(x)
ds2 = ds %>% mutate_all(scale2)
colnames(ds2) = c('x','y')
return(ds2)
})
# Generate a plot of the dataset ----
output$plot <- renderPlot({
dataset <- datasetInput()
tau = input$tau
sigma = input$sigma
theta = input$theta
x_new = pretty(dataset$x, n = 100)
Sigma_new = tau^2 * Exp.cov(dataset$x, x_new,
theta = theta, p = 2)
Sigma = diag(sigma^2,nrow(dataset)) +
tau^2 * Exp.cov(dataset$x, dataset$x,theta = theta,
p = 2)
GP_pred = tibble(
x_new = x_new,
mu_pred = t(Sigma_new)%*%solve(Sigma)%*%dataset$y
)
p = ggplot(dataset, aes(x = x, y = y)) +
geom_point() +
labs(title = input$dataset) +
geom_line(data = GP_pred, aes(x = x_new, y = mu_pred),
colour = 'red')
if(input$checkbox) {
Sigma_new_new = tau^2 * Exp.cov(x_new, x_new,
theta = theta, p = 2)
Sigma_pred = Sigma_new_new -
t(Sigma_new)%*%solve(Sigma)%*%Sigma_new
se = sqrt(diag(Sigma_pred))
GP_pred$lower = GP_pred$mu_pred - qnorm(0.75)*se
GP_pred$higher = GP_pred$mu_pred + qnorm(0.75)*se
p = p +
geom_line(data = GP_pred, aes(x = x_new, y = lower),
linetype = 2, colour = 'red') +
geom_line(data = GP_pred, aes(x = x_new, y = higher),
linetype = 2, colour = 'red')
}
print(p)
})
# Show the first "n" observations ----
# The output$view depends on both the databaseInput reactive
# expression and input$obs, so it will be re-executed whenever
# input$dataset or input$obs is changed
}
lr_data = tibble(
x=sort(rnorm(100)),
y = rnorm(100,3+2*x,1),
fits = fitted(lm(y~x))
)
p <- ggplot(lr_data,aes(x,y)) +
geom_point()+
geom_line(aes(y=fits))
# Fitting linear regression via maximum likelihood
beta_0=3;beta_1=2;sigma=1
with(lr_data,sum(dnorm(y,beta_0 + beta_1*x,sd=sigma,log = TRUE)))
#Fitting LR using multivariate normal
library(mvtnorm)
Sigma = diag(sigma,nrow(lr_data))
X=with(lr_data,cbind(1,x))
beta=c(beta_0,beta_1)
with(lr_data,dmvnorm(y,X%*%beta,Sigma, log=TRUE))
#Autocovariance Functions
tau=1;theta1=10;theta2=1
acv = tibble(
distance=seq(0,5,length=100),
`theta=10` = tau^2 * exp(-(distance)^2/theta1),
`theta = 1`= tau^2 * exp(-(distance)^2/theta2),
)
p=acv %>%
gather(key=Type,value=ACF,-distance)%>%
ggplot(aes(x=distance,y=ACF,colour=Type))+
geom_line()
p
#Fitting a model via MVN
suppressPackageStartupMessages(library(fields))
sigma = 1;tau=1
Sigma= with(lr_data,
diag(sigma^2,nrow(lr_data))+
tau^2*Exp.cov(x,x,theta=theta2,p=2))
round(Sigma[1:3,1:3],3)
with(lr_data,dmvnorm(y,X%*%beta,Sigma,log=TRUE))
#New regression data set
suppressPackageStartupMessages(library(boot))
scale2 = function(x)(x-mean(x))/sd(x)
motor2 = motor %>% mutate_all(scale2)
motor2 %>%
ggplot(aes(x=times, y = accel))+
geom_point()
#Fitting a GP
nll = function(par){
tau=par[1]
sigma=par[2]
theta=par[3]
Sigma = with(motor2,
diag(sigma^2,nrow(motor2))+
tau^2*Exp.cov(times,times,
with(motor2, -dmvnorm(accel,
rep(0,nrow(motor2)),
sigma=Sigma,log=TRUE))                              theta=theta,p=2))
}
nll(c(1,1,1))
#Fitting LR using multivariate normal
library(mvtnorm)
install.packages("mvtnorm")
library(mvtnorm)
Sigma = diag(sigma,nrow(lr_data))
X=with(lr_data,cbind(1,x))
beta=c(beta_0,beta_1)
with(lr_data,dmvnorm(y,X%*%beta,Sigma, log=TRUE))
acv
?motor
d<-Bacteria
x <-Bacteria$Temp
y <- Bacteria$Count
plot(x,y)
model<-lm(y~x, data=d)
abline(model)
#Plotting residuals vs yi
plot(predict(model), residuals(model))
install.packages("stan")
p<-runif(1,0,1)
p<-runif(1,0,1)
x<-rbinom(1,n,p)
remove.packages("rstan")
if(file.exists(".RData")) file.remove(".RData")
#Monday 7th
mon_7 <- 738+1901+410+2377+757+979+344+173+752
#Monday 7th
738+1901+410+2377+757+979+344+173+752
738+1901+410+2377+757+979+344+173+752+2414
#Tues 8th
1835+1193+947+496+785
#Wed 9th
1600+500+1411+1351+941+1130+500
#Wed 9th
1600+500+1411+1351+941+1130+500+700
#Fri 11th
500+1330+1060+937+500
# Sat
543+739+18503.94+4593.18+1287+25301.84
#mon
1643+655+1489
#tues
1356+1000+1001+1001+2000
#Set working directory
setwd("/Users/mupton/Desktop/Resources/Stochastic Models /TSExample")
#Load packages
library(dplyr)
library(magrittr)
library(tidyr)
library(readr)
library(ggplot2)
library(rjags)
library(R2jags)
#call function
Rfiles<-list.files(file.path(getwd(),"R"))#Finding my R codes
Rfiles<- Rfiles[grepl(".R",Rfiles)]#Pulling out the codes
sapply(paste0("R/",Rfiles),source)#Sourcing those functions
#Read in data
sldat<-read.csv("data/NC.csv")
#Plot the data
plot_gpdata(sldat)
#Plot the data
plot_gpdata(sldat)
#Set working directory
setwd("/Users/mupton/Desktop/Resources/Stochastic Models /TSExample")
#Load packages
library(dplyr)
library(magrittr)
library(tidyr)
library(readr)
library(ggplot2)
library(rjags)
library(R2jags)
#call function
Rfiles<-list.files(file.path(getwd(),"R"))#Finding my R codes
Rfiles<- Rfiles[grepl(".R",Rfiles)]#Pulling out the codes
sapply(paste0("R/",Rfiles),source)#Sourcing those functions
#Read in data
sldat<-read.csv("data/NC.csv")
#Plot the data
plot_gpdata(sldat)
RunGPModel(sldat=sldat,model="model/GP_model.txt")
#Get estimates
get_ests(sldat,GPests = TRUE)
#Plot results using the plot_cp.r function script
plot_gpres(sldat)
#Set working directory
setwd("/Users/mupton/Desktop/Resources/Stochastic Models /TSExample")
#Load packages
library(dplyr)
library(magrittr)
library(tidyr)
library(readr)
library(ggplot2)
library(rjags)
library(R2jags)
#call function
Rfiles<-list.files(file.path(getwd(),"R"))#Finding my R codes
Rfiles<- Rfiles[grepl(".R",Rfiles)]#Pulling out the codes
sapply(paste0("R/",Rfiles),source)#Sourcing those functions
#Read in data
sldat<-read.csv("data/NC.csv")
#Plot the data
plot_data(sldat)
RunCPModel(sldat=sldat,model="model/CP_model.txt")
#Get estimates
get_ests(sldat,CPests = TRUE)
#Plot results using the plot_cp.r function script
plot_res(sldat)
#Set working directory
setwd("/Users/mupton/Desktop/Resources/Stochastic Models /TSExample")
#Load packages
library(dplyr)
library(magrittr)
library(tidyr)
library(readr)
library(ggplot2)
library(rjags)
library(R2jags)
#call function
Rfiles<-list.files(file.path(getwd(),"R"))#Finding my R codes
Rfiles<- Rfiles[grepl(".R",Rfiles)]#Pulling out the codes
sapply(paste0("R/",Rfiles),source)#Sourcing those functions
#Read in data
sldat<-read.csv("data/NC.csv")
#Plot the data
plot_data(sldat)
RunCPModel(sldat=sldat,model="model/CP_model.txt")
#Plot results using the plot_cp.r function script
plot_res(sldat)
#Set working directory
setwd("/Users/mupton/Desktop/Resources/Stochastic Models /TSExample")
#Load packages
library(dplyr)
library(magrittr)
library(tidyr)
library(readr)
library(ggplot2)
library(rjags)
library(R2jags)
#call function
Rfiles<-list.files(file.path(getwd(),"R"))#Finding my R codes
Rfiles<- Rfiles[grepl(".R",Rfiles)]#Pulling out the codes
sapply(paste0("R/",Rfiles),source)#Sourcing those functions
#Read in data
sldat<-read.csv("data/NC.csv")
#Plot the data
plot_data(sldat)
RunCPModel(sldat=sldat,model="model/CP_model.txt")
#Set working directory
setwd("/Users/mupton/Desktop/Resources/Stochastic Models /TSExample")
#Load packages
library(dplyr)
library(magrittr)
library(tidyr)
library(readr)
library(ggplot2)
library(rjags)
library(R2jags)
#call function
Rfiles<-list.files(file.path(getwd(),"R"))#Finding my R codes
Rfiles<- Rfiles[grepl(".R",Rfiles)]#Pulling out the codes
sapply(paste0("R/",Rfiles),source)#Sourcing those functions
#Read in data
sldat<-read.csv("data/NC.csv")
#Plot the data
plot_data(sldat)
RunCPModel(sldat=sldat,model="model/CP_model.txt")
#Get estimates
get_ests(sldat,CPests = TRUE)
#Plot results using the plot_cp.r function script
plot_res(sldat)
#Set working directory
setwd("/Users/mupton/Desktop/Resources/Stochastic Models /TSExample")
#Load packages
library(dplyr)
library(magrittr)
library(tidyr)
library(readr)
library(ggplot2)
library(rjags)
library(R2jags)
#call function
Rfiles<-list.files(file.path(getwd(),"R"))#Finding my R codes
Rfiles<- Rfiles[grepl(".R",Rfiles)]#Pulling out the codes
sapply(paste0("R/",Rfiles),source)#Sourcing those functions
#Read in data
sldat<-read.csv("data/NC.csv")
#Plot the data
plot_data(sldat)
#Get estimates
get_ests(sldat,CPests = TRUE)
#Plot results using the plot_cp.r function script
plot_res(sldat)
RunCPModel(sldat=sldat,model="model/CP_model.txt")
#Plot results using the plot_cp.r function script
plot_res(sldat)
#Plot results using the plot_cp.r function script
plot_res(sldat)
#Plot results using the plot_cp.r function script
plot_res(sldat)
RunCPModel(sldat=sldat,model="model/CP_model.txt")
#Set working directory
setwd("/Users/mupton/Desktop/Resources/Stochastic Models /TSExample")
#Load packages
library(dplyr)
library(magrittr)
library(tidyr)
library(readr)
library(ggplot2)
library(rjags)
library(R2jags)
#call function
Rfiles<-list.files(file.path(getwd(),"R"))#Finding my R codes
Rfiles<- Rfiles[grepl(".R",Rfiles)]#Pulling out the codes
sapply(paste0("R/",Rfiles),source)#Sourcing those functions
#Read in data
sldat<-read.csv("data/NC.csv")
#Plot the data
plot_data(sldat)
#Set working directory
setwd("/Users/mupton/Desktop/Resources/Stochastic Models /TSExample")
#Load packages
library(dplyr)
library(magrittr)
library(tidyr)
library(readr)
library(ggplot2)
library(rjags)
library(R2jags)
#call function
Rfiles<-list.files(file.path(getwd(),"R"))#Finding my R codes
Rfiles<- Rfiles[grepl(".R",Rfiles)]#Pulling out the codes
sapply(paste0("R/",Rfiles),source)#Sourcing those functions
#Read in data
sldat<-read.csv("data/NC.csv")
#Plot the data
plot_data(sldat)
RunCPModel(sldat=sldat,model="model/CP_model.txt")
#Get estimates
get_ests(sldat,CPests = TRUE)
#Plot results using the plot_cp.r function script
plot_res(sldat)
#Plot results using the plot_cp.r function script
plot_res(sldat)
#Plot results using the plot_cp.r function script
plot_res(sldat)
#Plot results using the plot_cp.r function script
plot_res(sldat)
#Get estimates
get_ests(sldat,CPests = TRUE)
#Plot results using the plot_cp.r function script
plot_res(sldat)
#Set working directory
setwd("/Users/mupton/Desktop/Resources/Stochastic Models /TSExample")
#Load packages
library(dplyr)
library(magrittr)
library(tidyr)
library(readr)
library(ggplot2)
library(rjags)
library(R2jags)
#call function
Rfiles<-list.files(file.path(getwd(),"R"))#Finding my R codes
Rfiles<- Rfiles[grepl(".R",Rfiles)]#Pulling out the codes
sapply(paste0("R/",Rfiles),source)#Sourcing those functions
#Read in data
sldat<-read.csv("data/NC.csv")
#Plot the data
plot_data(sldat)
#Plot results using the plot_cp.r function script
plot_res(sldat)
#Get estimates
get_ests(sldat,CPests = TRUE)
cp
#Get estimates
get_ests(sldat,CPests = TRUE)
cp
print(cp)
print("cp")
